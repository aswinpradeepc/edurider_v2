from django.db import models
import uuid
from django.contrib.gis.db import models as gis_models
from django.utils import timezone

class Trip(models.Model):
    """
    Trip model to store information about trips, including optimization data,
    driver assignments, and student lists.
    """
    # Primary key
    route_plan_id = models.UUIDField(
        primary_key=True,
        default=uuid.uuid4,
        editable=False,
        verbose_name="Route Plan ID"
    )
    
    # Trip scheduling details
    trip_date = models.DateField(
        help_text="Date on which this trip is scheduled"
    )
    start_time = models.TimeField(
        help_text="Planned departure time for this trip"
    )
    end_time = models.TimeField(
        help_text="Estimated arrival time for this trip"
    )
    
    # Trip status
    STATUS_CHOICES = [
        ('pending', 'Pending'),
        ('active', 'Active'),
        ('completed', 'Completed'),
        ('cancelled', 'Cancelled'),
    ]
    status = models.CharField(
        max_length=20,
        choices=STATUS_CHOICES,
        default='pending',
        help_text="Current status of the trip"
    )
    
    # Trip direction
    to_school = models.BooleanField(
        default=True,
        help_text="True for trips to school, False for trips from school"
    )
    
    # Trip metrics
    total_distance = models.FloatField(
        null=True, 
        blank=True,
        help_text="Total distance of the route in kilometers"
    )
    
    # Student list - Many-to-Many relationship
    # This is explicit instead of relying on the reverse relationship
    student_list = models.ManyToManyField(
        'students.Student',
        related_name='trip_assignments',
        blank=True,
        help_text="Students assigned to this trip"
    )
    
    # Route optimization data - explicit JSON field for route order
    route_order = models.JSONField(
        null=True, 
        blank=True,
        help_text="Ordered list of stops with coordinates as generated by the Mapbox API"
    )
    
    # Driver assignment (foreign key)
    driver = models.ForeignKey(
        'drivers.Driver',
        on_delete=models.SET_NULL,
        null=True,
        blank=True,
        related_name='trips',
        help_text="Driver assigned to this trip"
    )
    
    # Record keeping fields
    created_at = models.DateTimeField(auto_now_add=True)
    updated_at = models.DateTimeField(auto_now=True)
    
    def __str__(self):
        return f"{self.driver.name}" if self.driver else ""
    
    class Meta:
        ordering = ['-trip_date', 'start_time']
        verbose_name = 'Trip'
        verbose_name_plural = 'Trips'
        indexes = [
            models.Index(fields=['trip_date']),
            models.Index(fields=['status']),
            models.Index(fields=['to_school']),
        ]
        # Ensure unique combination of date, direction and driver
        unique_together = ['trip_date', 'to_school', 'driver']
